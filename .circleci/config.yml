version: 2

jobs:
  test_ssl:
    docker:
      - image: docker:18.09.0-rc1
    steps:
      - checkout
      - setup_remote_docker
      - run: docker create -v /certs --name certs alpine:3.4 /bin/true
      - run: docker run --rm -e SSL_SUBJECT=test.example.com --volumes-from certs paulczar/omgwtfssl
      - run: docker run --rm -h test.example.com --volumes-from certs -d --privileged --name test-docker-daemon docker:stable-dind --storage-driver=overlay --tlsverify --tlscacert=/certs/ca.pem --tlscert=/certs/cert.pem --tlskey=/certs/key.pem
      - run: docker build -t bollard .
      - run: docker run -e -ti -e DOCKER_CERT_PATH=/certs -e DOCKER_HOST='tcp://test.example.com:2375' --volumes-from certs --rm --link test-docker-daemon:docker bollard cargo test --features ssl -- --test test_version_ssl
  test_tls:
    docker:
      - image: docker:18.09.0-rc1
    steps:
      - checkout
      - setup_remote_docker
      - run: docker create -v /certs --name certs alpine:3.4 /bin/true
      - run: docker run --rm -e SSL_SUBJECT=test.example.com --volumes-from certs paulczar/omgwtfssl
      - run: |
             docker run -ti --volumes-from certs -w /certs frapsoft/openssl pkcs12 -export -out identity.pfx -inkey key.pem -in cert.pem -certfile ca.pem -passout pass:
      - run: docker run --rm -h test.example.com --volumes-from certs -d --privileged --name test-docker-daemon docker:stable-dind --storage-driver=overlay --tlsverify --tlscacert=/certs/ca.pem --tlscert=/certs/cert.pem --tlskey=/certs/key.pem
      - run: docker build -t bollard .
      - run: docker run -e -ti -e DOCKER_CERT_PATH=/certs -e DOCKER_HOST='tcp://test.example.com:2375' --volumes-from certs --rm --link test-docker-daemon:docker bollard cargo test -- --test test_version_tls
  test_http:
    docker:
      - image: docker:18.09.0-rc1
    steps:
      - checkout
      - setup_remote_docker
      - run: docker run --rm -h test.example.com -d --privileged --name test-docker-daemon docker:stable-dind --storage-driver=overlay
      - run: docker build -t bollard .
      - run: docker run -e -ti -e DOCKER_HOST='tcp://test.example.com:2375' --rm --link test-docker-daemon:docker bollard cargo test --features test_http -- --test test_version_http
  test_unix:
    docker:
      - image: docker:18.09.0-rc1
    steps:
      - checkout
      - setup_remote_docker
      - run: docker build -t bollard .
      - run: docker run -d --restart always --name registry -p 5000:5000 registry:2
      - run: docker pull hello-world:linux
      - run: docker pull fnichol/uhttpd
      - run: docker tag hello-world:linux localhost:5000/hello-world:linux
      - run: docker tag fnichol/uhttpd localhost:5000/fnichol/uhttpd
      - run: docker push localhost:5000/hello-world:linux
      - run: docker push localhost:5000/fnichol/uhttpd
      - run: docker run -e REGISTRY_HTTP_ADDR=localhost:5000 -v /var/run/docker.sock:/var/run/docker.sock -ti --rm bollard cargo test -- --test-threads 1
  test_doc:
    docker:
      - image: docker:18.09.0-rc1
    steps:
      - checkout
      - setup_remote_docker
      - run: docker build -t bollard .
      - run: docker run -ti  --rm bollard cargo test --doc --all-features
  test_unix:
    docker:
      - image: docker:18.09.0-rc1
    steps:
      - checkout
      - setup_remote_docker
      - run: docker build -t bollard .
      - run: docker run -d --restart always --name registry -p 5000:5000 registry:2
      - run: docker pull hello-world:linux
      - run: docker pull fnichol/uhttpd
      - run: docker tag hello-world:linux localhost:5000/hello-world:linux
      - run: docker tag fnichol/uhttpd localhost:5000/fnichol/uhttpd
      - run: docker push localhost:5000/hello-world:linux
      - run: docker push localhost:5000/fnichol/uhttpd
      - run: docker run -e REGISTRY_HTTP_ADDR=localhost:5000 -v /var/run/docker.sock:/var/run/docker.sock -ti --rm bollard cargo test -- --test-threads 1


workflows:
  version: 2
  test-image:
    jobs:
      - test_ssl
      - test_http
      - test_unix
      - test_tls
      - test_doc
